res[[1]]$log_model_evidence
res[[1]]$theta_hist
dim(res[[1]]$theta_hist)
theta_mean <- apply(res[[1]]$theta_hist, MARGIN = c(2, 3), FUN = mean)
theta_mean
theta_mean <- apply(res[[1]]$theta_hist, MARGIN = c(2, 3), FUN = mean)
theta_sd <- apply(res[[1]]$theta_hist, MARGIN = c(2, 3), FUN = sd)
plot_theta_paths(theta_mean, theta_sd, k=3, theta_true = 0.2)
plot_theta_paths(theta_mean, theta_sd, k=3, theta_true = 0.2)
library(here)
source(here("src", "config.R"))          # build_cfg(), sim_static_cop_6(), …
plot_theta_paths(theta_mean, theta_sd, k=3, theta_true = 0.2)
sim_data[[1]]$RVM
plot_theta_paths(theta_mean, theta_sd, k=3, theta_true = 0)
plot_theta_paths(theta_mean, theta_sd, k=1, theta_true = -0.63)
plot_theta_paths(theta_mean, theta_sd, k=4, theta_true = 0.74)
plot_theta_paths(tanh(theta_mean), theta_sd, k=4, theta_true = 0.74)
plot_theta_paths(tanh(theta_mean), theta_sd, k=1, theta_true = -0.63)
plot_theta_paths(tanh(theta_mean), theta_sd, k=7, theta_true = 0.35)
plot_theta_paths(tanh(theta_mean), theta_sd, k=6, theta_true = 0.35)
plot_theta_paths(tanh(theta_mean), theta_sd, k=12, theta_true = -0.37)
plot_theta_paths(tanh(theta_mean), theta_sd, k=12, theta_true = -0.5)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/mc_simulation_exercise.R", echo=TRUE)
library(here)
# all block-SMC fits for the “M200_ivgamma_beta” variant
block_files <- list.files(
here("simul_results/mc_static_dgp/M200_ivgamma_beta"),
pattern = "^standard_.*\\.rds$", full.names = TRUE
)
res <- lapply(block_files, readRDS)
res[[1]]$theta_q025
source("~/Research/project_1/Code/Exploratory/smc_vines/src/mc_simulation_exercise.R", echo=TRUE)
install.packages("renv")
renv::init(bare = TRUE)
renv::snapshot()
renv::snapshot()
renv::snapshot()
renv::dependencies()
renv::snapshot()
renv::dependencies()
renv::snapshot()
renv::status()
renv::snapshot()
renv::settings$install.staged(FALSE, persist = TRUE)  # once per project
renv::settings$install.staged(FALSE, persist = TRUE)  # once per project
install.staged(value = NULL, project = NULL)
install.packages("renv")      # safest to upgrade first
renv::settings$install.staged(FALSE)   # or renv::settings$install.staged(value = FALSE)
renv::install("Rcpp")                  # or renv::restore()
renv::dependencies() |>
subset(Package == "Rcpp")
tools::package_dependencies("Rcpp", recursive = TRUE)
renv::remove("Rcpp")
renv::snapshot()
renv::settings$snapshot.type("explicit")   # saved in renv/settings.dcf
renv::cache$purge("Rcpp")   # removes Rcpp from renv’s global cache
renv::dependencies() |> subset(Package == "Rcpp")
jsonlite::read_json("renv.lock")$Packages |> names()
# which installed packages depend (directly or indirectly) on Rcpp?
tools::dependsOnPkgs("Rcpp", recursive = TRUE)
install.packages("Rcpp")
libray(Rcpp)
library(Rcpp)
library('Rcpp')
renv::deactivate()
library(Rcpp)
install.packages('Rcpp')
.libPaths()
renv::activate()
renv::clean(confirm = FALSE)
renv::restore()
options(pkgType = "binary")
renv::restore()
renv::cache$list("Rcpp")
renv::snapshot()
renv::snapshot()
renv::status()
jsonlite::fromJSON("renv.lock")$Packages |> names()
renv::dependencies()
packageVersion("Rcpp")
find.package("Rcpp")
.libPaths()
options(pkgType = "binary")                       # ensure binary
renv::settings$install.staged(FALSE)
renv::install("Rcpp")
packageVersion("Rcpp")
packageVersion("Rcpp")
renv::snapshot()
.libPaths()
find.package("Rcpp")
renv::status()
source("~/Research/project_1/Code/Exploratory/smc_vines/src/mc_simulation_exercise.R", echo=TRUE)
.libPaths()      # make sure first path is renv's library
installed.packages()[, "Package"] |> as.vector()
renv::install("here")
renv::snapshot()
find.package("here")
]
find.package("here")
source("~/Research/project_1/Code/Exploratory/smc_vines/src/mc_simulation_exercise.R", echo=TRUE)
renv::dependencies()
renv::restore()
deps <- renv::dependencies()
deps$Package
missing <- setdiff(deps$Package, rownames(installed.packages()))
if (length(missing)) {
renv::install(missing)
}
renv::snapshot()
source("~/Research/project_1/Code/Exploratory/smc_vines/src/mc_simulation_exercise.R", echo=TRUE)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/mc_simulation_exercise.R", echo=TRUE)
library(jsonlite)
# Read the lockfile
lock <- fromJSON("renv.lock")
pkgs <- lock$Packages
# Create a character vector: "pkg==version"
lines <- paste0(names(pkgs), "==", sapply(pkgs, `[[`, "Version"))
lines
renv::activate()
library(jsonlite)
# Read the lockfile
lock <- fromJSON("renv.lock")
pkgs <- lock$Packages
# Create a character vector: "pkg==version"
lines <- paste0(names(pkgs), "==", sapply(pkgs, `[[`, "Version"))
lines
library(here)
library(Rcpp)
deps <- renv::dependencies()
unique(deps$Package)
pkgs <- unique(renv::dependencies()$Package)
pkgs
# create a vector of "package==version"
lines <- sapply(pkgs, function(pkg) {
ver <- tryCatch(as.character(packageVersion(pkg)), error = function(e) "not_installed")
paste0(pkg, "==", ver)
})
lines
writeLines(lines, "package_versions.txt")
rrenv::activate()
renv::activate()
library(here)
renv::snapshot()
renv::settings$snapshot.type()
list.files(.libPaths()[1])
names(jsonlite::read_json("renv.lock")$Packages)
renv::status()
renv::settings$snapshot.type("implicit")
renv::snapshot(force = TRUE)
names(jsonlite::read_json("renv.lock")$Packages)
tools::dependsOnPkgs("RcppEigen", recursive = TRUE)
R --version
--version
version
RStudio
RStudio.Version()
source("~/Research/project_1/Code/Exploratory/smc_vines/src/mc_simulation_exercise.R", echo=TRUE)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/mc_simulation_exercise.R", echo=TRUE)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/mc_simulation_exercise.R", echo=TRUE)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/mc_simulation_exercise.R", echo=TRUE)
library(here)
# all block-SMC fits for the “M200_ivgamma_beta” variant
block_files <- list.files(
here("simul_results/mc_static_dgp/M200_ivgamma_beta"),
pattern = "^standard_.*\\.rds$", full.names = TRUE
)
res <- lapply(block_files, readRDS)
# corresponding data sets
data_files <- list.files(
here("simul_results/mc_static_dgp/_data"),
pattern = "^data_.*\\.rds$", full.names = TRUE
)
sim_data <- lapply(data_files, readRDS)
sim_data[[1]]$RVM
sim_data[[1]]
sim_data[[1]]$RVM
sim_data[[1]]
sim_data[[1]]$theta
theta_mean <- apply(res[[1]]$theta_hist, MARGIN = c(2, 3), FUN = mean)
theta_sd <- apply(res[[1]]$theta_hist, MARGIN = c(2, 3), FUN = sd)
plot_theta_paths(tanh(theta_mean), theta_sd, k=1, theta_true = -0.37)
theta_mean
theta_mean[length(theta_mean)]
theta_mean[,length(theta_mean)]
class(theta_mean)
theta_mean[[,length(theta_mean)]]
theta_mean[length(theta_mean)]
length(theta_mean)
nrow(theta_mean)
theta_mean[,nrow(theta_mean)]
theta_mean[nrow(theta_mean),]
sim_data[[1]]$theta
sim_data[[1]]$RVM
N      = 200
p_zero = 0.5
rho_lo = -0.99
rho_hi =  0.99
d <- 6
## 1. C-vine structure matrix (same pattern as your 3-D prototype)
sim_matrix <- matrix(0, d, d)
for (j in 1:d)
sim_matrix[j:d, j] <- j:d         # column j :  j, j+1, …, d
## 2. Family- and parameter matrices (lower-triangular part only)
family_matrix <- matrix(0, d, d)
theta_matrix  <- matrix(0, d, d)
for (j in 1:(d - 1)) {              # columns
for (i in (j + 1):d) {            # rows below the diagonal
if (runif(1) > p_zero) {        # keep the edge?
family_matrix[i, j] <- 1      # 1 = Gaussian copula
theta_matrix[i,  j] <- runif(1, rho_lo, rho_hi)
}
}
}
## 3. Build the R-vine object and simulate data
RVM <- RVineMatrix(sim_matrix,
family = family_matrix,
par    = theta_matrix)
RVM
library(rvinecopulib)
library(VineCopula)
library(data.table)
library(tictoc)
library(here)
## 3. Build the R-vine object and simulate data
RVM <- RVineMatrix(sim_matrix,
family = family_matrix,
par    = theta_matrix)
RVM
sim_data[[1]]$RVM
theta_mean[nrow(theta_mean),]
library(here)
source(here("src", "config.R"))          # build_cfg(), sim_static_cop_6(), …
plot_theta_paths(tanh(theta_mean), theta_sd, k=1, theta_true = -0.37)
plot_theta_paths(tanh(theta_mean), theta_sd, k=1, theta_true = -0.63)
# all block-SMC fits for the “M200_ivgamma_beta” variant
block_files <- list.files(
here("simul_results/mc_static_dgp/M200_ivgamma_beta"),
pattern = "^block_.*\\.rds$", full.names = TRUE
)
res <- lapply(block_files, readRDS)
theta_mean <- apply(res[[1]]$theta_hist, MARGIN = c(2, 3), FUN = mean)
theta_sd <- apply(res[[1]]$theta_hist, MARGIN = c(2, 3), FUN = sd)
tanh(theta_mean[nrow(theta_mean),])
sim_data[[1]]$RVM
plot_theta_paths(tanh(theta_mean), theta_sd, k=1, theta_true = -0.63)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/mc_simulation_exercise.R", echo=TRUE)
data$RVM
skeleton  <- vinecop(U[1:178,], family_set = "gaussian", structure = data$RVM$Matrix[nrow(data$RVM$Matrix):1, ])
skeleton  <- vinecop(data$U[1:178,], family_set = "gaussian", structure = data$RVM$Matrix[nrow(data$RVM$Matrix):1, ])
skeleton$pair_copulas
source("~/Research/project_1/Code/Exploratory/smc_vines/src/mc_simulation_exercise.R", echo=TRUE)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/mc_simulation_exercise.R", echo=TRUE)
# all block-SMC fits for the “M200_ivgamma_beta” variant
block_files <- list.files(
here("simul_results/mc_static_dgp/M200_ivgamma_beta"),
pattern = "^block_.*\\.rds$", full.names = TRUE
)
res <- lapply(block_files, readRDS)
sim_data[[1]]$RVM
U <- data$U
skeleton  <- vinecop(U, family_set = "gaussian", structure = data$RVM$Matrix[nrow(data$RVM$Matrix):1, ])
skeleton$pair_copulas
# corresponding data sets
data_files <- list.files(
here("simul_results/mc_static_dgp/_data"),
pattern = "^data_.*\\.rds$", full.names = TRUE
)
sim_data <- lapply(data_files, readRDS)
U <- sim_data$U
skeleton  <- vinecop(U, family_set = "gaussian", structure = data$RVM$Matrix[nrow(data$RVM$Matrix):1, ])
U <- sim_data$U
skeleton  <- vinecop(U, family_set = "gaussian", structure = sim_data$RVM$Matrix[nrow(sim_data$RVM$Matrix):1, ])
sim_data$RVM
sim_data[[1]]$RVM
theta_mean <- apply(res[[1]]$theta_hist, MARGIN = c(2, 3), FUN = mean)
theta_sd <- apply(res[[1]]$theta_hist, MARGIN = c(2, 3), FUN = sd)
plot_theta_paths(tanh(theta_mean), theta_sd, k=1, theta_true = -0.63)
plot_theta_paths(tanh(theta_mean), theta_sd, k=2, theta_true = 0)
plot_theta_paths(tanh(theta_mean), theta_sd, k=3, theta_true = 0)
plot_theta_paths(tanh(theta_mean), theta_sd, k=4, theta_true = 0.74)
plot_theta_paths(tanh(theta_mean), theta_sd, k=5, theta_true = 0)
plot_theta_paths(tanh(theta_mean), theta_sd, k=6, theta_true = 0.35)
plot_theta_paths(tanh(theta_mean), theta_sd, k=7, theta_true =-0.47)
plot_theta_paths(tanh(theta_mean), theta_sd, k=10, theta_true =-0.37)
plot_theta_paths(tanh(theta_mean), theta_sd, k=12, theta_true =-0.5)
plot_theta_paths(tanh(theta_mean), 2*theta_sd, k=12, theta_true =-0.5)
tanh(0.1)
atanh(0.1)
# all block-SMC fits for the “M200_ivgamma_beta” variant
block_files <- list.files(
here("simul_results/mc_static_dgp/M200_ivgamma_beta"),
pattern = "^standard_.*\\.rds$", full.names = TRUE
)
res <- lapply(block_files, readRDS)
theta_mean <- apply(res[[1]]$theta_hist, MARGIN = c(2, 3), FUN = mean)
theta_sd <- apply(res[[1]]$theta_hist, MARGIN = c(2, 3), FUN = sd)
plot_theta_paths(tanh(theta_mean), 2*theta_sd, k=12, theta_true =-0.5)
# all block-SMC fits for the “M200_ivgamma_beta” variant
block_files <- list.files(
here("simul_results/mc_static_dgp/M200_ivgamma_beta"),
pattern = "^block_.*\\.rds$", full.names = TRUE
)
res <- lapply(block_files, readRDS)
theta_mean <- apply(res[[1]]$theta_hist, MARGIN = c(2, 3), FUN = mean)
theta_sd <- apply(res[[1]]$theta_hist, MARGIN = c(2, 3), FUN = sd)
plot_theta_paths(tanh(theta_mean), 2*theta_sd, k=12, theta_true =-0.5)
# all block-SMC fits for the “M200_ivgamma_beta” variant
block_files <- list.files(
here("simul_results/mc_static_dgp/M200_ivgamma_beta/acc10"),
pattern = "^block_.*\\.rds$", full.names = TRUE
)
res <- lapply(block_files, readRDS)
theta_mean <- apply(res[[1]]$theta_hist, MARGIN = c(2, 3), FUN = mean)
theta_sd <- apply(res[[1]]$theta_hist, MARGIN = c(2, 3), FUN = sd)
plot_theta_paths(tanh(theta_mean), 2*theta_sd, k=12, theta_true =-0.5)
res
# all block-SMC fits for the “M200_ivgamma_beta” variant
block_files <- list.files(
here("simul_results/mc_static_dgp/M200_ivgamma_beta/acc10/"),
pattern = "^block_.*\\.rds$", full.names = TRUE
)
res <- lapply(block_files, readRDS)
res
# all block-SMC fits for the “M200_ivgamma_beta” variant
block_files <- list.files(
here("simul_results/mc_static_dgp/M200_ivgamma_beta/acc10/"),
pattern = "^block_.*\\.rds$", full.names = TRUE
)
block_files
# all block-SMC fits for the “M200_ivgamma_beta” variant
block_files <- list.files(
here("simul_results/mc_static_dgp/M200_ivgamma_beta/acc10"),
pattern = "^block_.*\\.rds$", full.names = TRUE
)
res <- lapply(block_files, readRDS)
res
path ="C:/Users/55419/Documents/Research/project_1/Code/Exploratory/smc_vines/simul_results/mc_static_dgp/M200_ivgamma_beta/acc 10/block_sim001.rds"
res <- lapply(path, readRDS)
res
theta_mean <- apply(res[[1]]$theta_hist, MARGIN = c(2, 3), FUN = mean)
theta_sd <- apply(res[[1]]$theta_hist, MARGIN = c(2, 3), FUN = sd)
plot_theta_paths(tanh(theta_mean), 2*theta_sd, k=12, theta_true =-0.5)
path ="C:/Users/55419/Documents/Research/project_1/Code/Exploratory/smc_vines/simul_results/mc_static_dgp/M200_ivgamma_beta/acc 10/standard_sim001.rds"
res <- lapply(path, readRDS)
theta_mean <- apply(res[[1]]$theta_hist, MARGIN = c(2, 3), FUN = mean)
theta_sd <- apply(res[[1]]$theta_hist, MARGIN = c(2, 3), FUN = sd)
plot_theta_paths(tanh(theta_mean), 2*theta_sd, k=12, theta_true =-0.5)
(3 - 1) * 0.025^2/(3-1)
((3 - 1) * 0.025^2)/(3-1)
sqrt(((3 - 1) * 0.025^2)/(3-1))
sqrt(((4 - 1) * 0.025^2)/(4-1))
source("~/Research/project_1/Code/Exploratory/smc_vines/src/mc_simulation_exercise.R", echo=TRUE)
tanh(0.6)
tanh(0.65)
tanh(0.623)
# ──────────────────────────────────────────────────────────────────────────────
#  experiment_runner.R  ── batch-run C-vine SMC (standard & block)  ── 2025-06-18
# ──────────────────────────────────────────────────────────────────────────────
library(here)
source(here::here("src","config.R"))
library(profvis)
dir.create(here::here("simul_results/static_dgp"), showWarnings = FALSE)
run_and_save <- function(data, cfg, alg = c("standard", "block"), tag = NULL) {
alg <- match.arg(alg)
res <- switch(
alg,
standard = run_standard_smc(data, cfg, type = "standard"),
block    = run_block_smc(data, cfg, type = "block")
)
res$cfg <- cfg
tag   <- if (is.null(tag)) "" else paste0("_", tag)
fname <- here::here("simul_results/static_dgp", paste0(alg, "_", ncol(U) , tag))
saveRDS(res, fname)
message(sprintf("✓ Saved %s", fname))
cat("\n\n===== FINAL MODEL EVALUATION =====\n")
cat(sprintf("Log Model Evidence: %.4f\n", res$log_model_evidence))
rm(res); invisible(gc())
}
set.seed(42)
data  <- sim_static_cop_6(N = 300)
U <- data$U
d  <- ncol(U)
cfg_variants <- list(
# list(
#   label      = "nmh1_N200_fixed",
#   n_mh       = 1,
#   tau_prior  = "fixed"
# ) ,
list(
label      = "M200_ivgamma_beta",
tau_prior  = "inv_gamma",
pi_prior   = "beta",
M           = 2000
)
)
i=1
v    <- cfg_variants[[i]]
tag  <- v[["label"]]
tweaks <- v[ setdiff(names(v), "label") ]
cfg    <- modifyList(build_cfg(d), tweaks)
cfg$label <- tag
set.seed(cfg$seed)
library(rvinecopulib)
library(VineCopula)
library(data.table)
library(tictoc)
library(Rcpp)
library(here)
library(parallel)
library(RcppThread)
library(assertthat)
library(profvis)
assignInNamespace("assert_that", function(...) invisible(TRUE), ns = "assertthat")
assignInNamespace("see_if", function(...) invisible(TRUE), ns = "assertthat")
source(here('src','core_functions.R'))
source(here('src','simulation.R'))
n_cores    = max(parallel::detectCores(), 1)
U <- data$U
type="standard"
# ── dimensions ───────────────────────────────────────────────────
N <- nrow(U); K <- cfg$K; M <- cfg$M
# ── pre-allocate diagnostics ───────────────────────────────────────────────
out <- list(
log_pred   = numeric(N),
theta_mean = matrix(NA_real_, N, K),
theta_se   = matrix(NA_real_, N, K),
gamma_mean = matrix(NA_real_, N, K),
gamma_se   = matrix(NA_real_, N, K),
diag_log   = data.table::data.table(
t      = integer(N),
tr     = integer(N),
ESS    = numeric(N),
unique = integer(N),
euc    = numeric(N),
tau_mean = numeric(N),      # NEW
tau_sd   = numeric(N),       # NEW
pi_mean = numeric(N),      # NEW
pi_sd   = numeric(N)       # NEW
),
mh_acc_pct      = rep(NA_real_, N),
step_sd_hist      = rep(NA_real_, N),
theta_hist      = array(NA_real_,    dim = c(M, N, K)),
#gamma_hist      = array(NA_integer_, dim = c(M, N, K)),
ancestorIndices = matrix(0L, M, N),
incl_hist = matrix(NA_real_, N, K),
theta_q025   = matrix(NA_real_, N, K),
theta_q975   = matrix(NA_real_, N, K)
)
# ── initial state ──────────────────────────────────────────────────────────
particles <- replicate(M, new_particle(cfg), simplify = FALSE)
out$ancestorIndices[, 1] <- seq_len(M)
tr  <- 0L        #  “tree” counter — keep if you resample by tree else 0
pos <- 1L        #  row pointer for diag_log
# ── parallel backend ───────────────────────────────────────────────────────
cl <- parallel::makeCluster(n_cores)
on.exit(parallel::stopCluster(cl), add = TRUE)          # safe cleanup
parallel::clusterSetRNGStream(cl, cfg$seed)
parallel::clusterExport(
cl,
c("mh_step_in_tree", "vine_from_particle", "log_prior", "slab_sd_from_tau", "spike_sd_from_tau", "update_tau2", "rinvgamma", "dinvgamma", "update_pi",
"bicop_dist", "vinecop_dist", "dvinecop", "skeleton", "cfg", "fast_vine_from_particle",
"mh_step", "propagate_particles", "update_weights", "ESS",
"diagnostic_report", "systematic_resample", "resample_move",
"compute_predictive_metrics", "compute_log_incr"),
envir = environment()
)
t_idx=1
t_idx
source("~/Research/project_1/Code/Exploratory/smc_vines/src/runner.R", echo=TRUE)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/runner.R", echo=TRUE)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/runner.R", echo=TRUE)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/runner.R", echo=TRUE)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/runner.R", echo=TRUE)
# ──────────────────────────────────────────────────────────────────────────────
#  experiment_runner.R  ── batch-run C-vine SMC (standard & block)  ── 2025-06-18
# ──────────────────────────────────────────────────────────────────────────────
library(here)
source(here::here("src","config.R"))
library(profvis)
dir.create(here::here("simul_results/static_dgp"), showWarnings = FALSE)
run_and_save <- function(data, cfg, alg = c("standard", "block"), tag = NULL) {
alg <- match.arg(alg)
res <- switch(
alg,
standard = run_standard_smc(data, cfg, type = "standard"),
block    = run_block_smc(data, cfg, type = "block")
)
res$cfg <- cfg
tag   <- if (is.null(tag)) "" else paste0("_", tag)
fname <- here::here("simul_results/static_dgp", paste0(alg, "_", ncol(U) , tag))
saveRDS(res, fname)
message(sprintf("✓ Saved %s", fname))
cat("\n\n===== FINAL MODEL EVALUATION =====\n")
cat(sprintf("Log Model Evidence: %.4f\n", res$log_model_evidence))
rm(res); invisible(gc())
}
set.seed(42)
data  <- sim_static_cop_6(N = 500)
U <- data$U
skeleton  <- vinecop(U, family_set = "gaussian", structure = data$RVM$Matrix[nrow(data$RVM$Matrix):1, ])
skeleton$pair_copulas
source("~/Research/project_1/Code/Exploratory/smc_vines/src/runner.R", echo=TRUE)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/runner.R", echo=TRUE)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/runner.R", echo=TRUE)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/runner.R", echo=TRUE)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/runner.R", echo=TRUE)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/runner.R", echo=TRUE)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/runner.R", echo=TRUE)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/runner.R", echo=TRUE)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/runner.R", echo=TRUE)
renv::deactivate()
.libPaths()
