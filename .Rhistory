source("~/Research/project_1/Code/Exploratory/smc_vines/src/main.R", echo=TRUE)
# ──────────────────────────────────────────────────────────────────────────────
#  C-vine SMC with spike-and-slab prior
#  2025-06-16
# ──────────────────────────────────────────────────────────────────────────────
set.seed(42)
quiet_assert <- function() {
assignInNamespace("assert_that", function(...) invisible(TRUE), ns = "assertthat")
assignInNamespace("see_if",      function(...) invisible(TRUE), ns = "assertthat")
}
load_packages <- function() {
pkgs <- c(
"rvinecopulib", "VineCopula", "data.table", "tictoc", "Rcpp",
"here", "parallel", "RcppThread", "profvis"
)
lapply(pkgs, require, character.only = TRUE)
}
build_cfg <- function(d) {
list(
d            = d,
K            = d * (d - 1) / 2,
M            = 1000,
pi0_edge     = 0.30,
slab_sd      = 0.50,
ess_thr      = 0.50,
W            = 15L,
k_step       = 1L,
proc_sd      = 0,
p_dyn_flip   = 0,
n_mh         = 1L,
step_sd      = 0.05,
p_flip_edge  = 0.10,
indep_copula = bicop_dist("indep"),
G=2L #important
)
}
#
# main <- function(type = c("standard", "tree")) {
#
# }
#
# #if (sys.nframe() == 0) main("standard")
#
#
# main()
type = "block"
quiet_assert()
load_packages()
#type <- match.arg(type)
source(here("src", "core_functions.R"))
source(here("src", "simulation.R"))
source(here("src", "smc_stand_vine.R"))
source(here("src", "smc_block_vine.R"))
# ---- 1 • Simulate data -----------------------------------------------------
U  <- sim_static_cop_3(N = 6)
N  <- nrow(U)
d  <- ncol(U)
cfg <- build_cfg(d)
# ---- 2 • Initial skeleton & particles -------------------------------------
skeleton  <- vinecop(U, family_set = "gaussian")
seed       = 42
n_cores    = max(parallel::detectCores() - 1, 1)
W_predict  = 5L
# ── 0 • basic sizes & helpers ──────────────────────────────────────────────
N  <- nrow(U);  d <- ncol(U)
M  <- cfg$M;    K <- cfg$K;     G <- cfg$G
S  <- N * G                         #  total sub-steps
# ── 1 • initial skeletons ─────────────────────────────────────────────────
full_skeleton <- vinecop(U, family_set = "gaussian")        # complete tree
skeletons_by_tr <- lapply(seq_len(d - 1L), function(tr) {
vinecop(U,
family_set = "gaussian",
structure  = full_skeleton$structure,
trunc_lvl  = tr)
})
# ── 2 • initial particles & diagnostics store ────────────────────────────
particles <- replicate(M, new_particle(cfg), simplify = FALSE)
n_pairs <- N * (d-1)
out <- list(
log_pred   = numeric(N),
theta_mean = matrix(NA_real_, N, K),
theta_se   = matrix(NA_real_, N, K),
gamma_mean = matrix(NA_real_, N, K),
gamma_se   = matrix(NA_real_, N, K),
diag_log   = data.table::data.table(
t      = integer(n_pairs),
tr     = integer(n_pairs),
ESS    = numeric(n_pairs),
unique = integer(n_pairs),
euc    = numeric(n_pairs)
),
theta_hist      = array(NA_real_,    dim = c(M, S, K)),
gamma_hist      = array(NA_integer_, dim = c(M, S, K)),
ancestorIndices = matrix(0L, M, S)
)
out$ancestorIndices[, 1L] <- seq_len(M)
# ── 3 • parallel backend ─────────────────────────────────────────────────
cl <- parallel::makeCluster(n_cores)
on.exit(parallel::stopCluster(cl), add = TRUE)
parallel::clusterSetRNGStream(cl, seed)
parallel::clusterExport(
cl, c("mh_step_in_tree", "vine_from_particle", "log_prior",
"bicop_dist", "vinecop_dist", "dvinecop", "full_skeleton",
"skeletons_by_tr", "cfg", "ESS", "propagate_particles",
"update_weights", "diagnostic_report", "systematic_resample",
"resample_move", "calculate_log_lik_tree_tr",
"compute_predictive_metrics"),
envir = environment()
)
# ── 4 • main loop over observations ──────────────────────────────────────
step_id <- 0L    # flat counter for sub-steps
for (t_idx in seq_len(N)) {
u_row     <- U[t_idx, , drop = FALSE]
particles <- propagate_particles(particles, cfg)   # state advance
# ---- Predictive metrics once per row ----------------------------------
if (t_idx > W_predict) {
w_prev <- vapply(particles, `[[`, numeric(1), "w")
w_prev <- w_prev / sum(w_prev)
pm <- compute_predictive_metrics(u_row, particles,
full_skeleton, w_prev, cfg)
out$log_pred[t_idx]    <- pm$log_pred_density
out$theta_mean[t_idx,] <- pm$theta_mean
out$theta_se[t_idx,]   <- pm$theta_se
out$gamma_mean[t_idx,] <- pm$gamma_mean
out$gamma_se[t_idx,]   <- pm$gamma_se
}
# ---- Inner loop over G “tree moves” -----------------------------------
for (tr_idx in seq_len(G)) { #CHECK THIS
step_id <- step_id + 1L
tmp_skel <- if (tr_idx == G) {  # final move uses deepest skeleton
skeletons_by_tr[[length(skeletons_by_tr)]]
} else {
skeletons_by_tr[[tr_idx]]
}
tr_prev <- tr_idx - 1L
log_incr <- vapply(
particles,
function(p) calculate_log_lik_tree_tr(
p, tmp_skel, u_row, t_idx, tr_idx, tr_prev,
skeletons_by_tr, cfg),
numeric(1)
)
particles <- update_weights(particles, log_incr)
w_new     <- vapply(particles, `[[`, numeric(1), "w")
# Diagnostics ---------------------------------------------------------
dg <- diagnostic_report(t_idx, tr_idx, U, particles, w_new, cfg)
out$diag_log[step_id, `:=`(
t      = t_idx,
tr     = tr_idx,
ESS    = dg$ESS,
unique = dg$unique,
euc    = dg$euc
)]
# Resample + block-MH move -------------------------------------------
if (ESS(w_new) < cfg$ess_thr * M && t_idx < N) {
newAnc <- systematic_resample(w_new)
particles <- particles[newAnc]          # shallow copy
for (p in particles) p$w <- 1 / M       # reset weights
data_up_to_t <- U[max(1, t_idx - cfg$W + 1) : t_idx, , drop = FALSE]
parallel::clusterSetRNGStream(cl, seed)
mh_res <- parallel::parLapply(
cl, seq_along(particles),
function(i, particles_local, data_t, tmp_skel, tr_idx, cfg) {
p <- particles_local[[i]]
local_acc <- 0L
for (k in seq_len(cfg$n_mh)) {
p <- mh_step_in_tree(p, tr_idx, data_t, tmp_skel, cfg)
if (isTRUE(p$last_accept)) local_acc <- local_acc + 1L
}
list(p = p, acc = local_acc)
},
particles, data_up_to_t, tmp_skel, tr_idx, cfg
)
particles <- lapply(mh_res, `[[`, "p")
} else {
prev_step <- step_id - 1L
newAnc    <- if (prev_step < 1L) seq_len(M) else out$ancestorIndices[, prev_step]
}
# Genealogy + history -------------------------------------------------
out$ancestorIndices[, step_id] <- newAnc
out$theta_hist[ , step_id, ] <- t(vapply(particles, `[[`, numeric(K), "theta"))
out$gamma_hist[ , step_id, ] <- t(vapply(particles, `[[`, integer(K), "gamma"))
}  # end tr loop
}    # end t loop
# ── 5 • finish & return ──────────────────────────────────────────────────
out$log_model_evidence <- sum(out$log_pred, na.rm = TRUE)
out$particles_final    <- particles
out$log_model_evidence
source("~/Research/project_1/Code/Exploratory/smc_vines/src/main.R", echo=TRUE)
# ──────────────────────────────────────────────────────────────────────────────
#  C-vine SMC with spike-and-slab prior
#  2025-06-16
# ──────────────────────────────────────────────────────────────────────────────
set.seed(42)
quiet_assert <- function() {
assignInNamespace("assert_that", function(...) invisible(TRUE), ns = "assertthat")
assignInNamespace("see_if",      function(...) invisible(TRUE), ns = "assertthat")
}
load_packages <- function() {
pkgs <- c(
"rvinecopulib", "VineCopula", "data.table", "tictoc", "Rcpp",
"here", "parallel", "RcppThread", "profvis"
)
lapply(pkgs, require, character.only = TRUE)
}
build_cfg <- function(d) {
list(
d            = d,
K            = d * (d - 1) / 2,
M            = 1000,
pi0_edge     = 0.30,
slab_sd      = 0.50,
ess_thr      = 0.50,
W            = 15L,
k_step       = 1L,
proc_sd      = 0,
p_dyn_flip   = 0,
n_mh         = 1L,
step_sd      = 0.05,
p_flip_edge  = 0.10,
indep_copula = bicop_dist("indep"),
G=2L #important
)
}
#
# main <- function(type = c("standard", "tree")) {
#
# }
#
# #if (sys.nframe() == 0) main("standard")
#
#
# main()
type = "block"
quiet_assert()
load_packages()
#type <- match.arg(type)
source(here("src", "core_functions.R"))
source(here("src", "simulation.R"))
source(here("src", "smc_stand_vine.R"))
source(here("src", "smc_block_vine.R"))
# ---- 1 • Simulate data -----------------------------------------------------
U  <- sim_static_cop_3(N = 6)
N  <- nrow(U)
d  <- ncol(U)
cfg <- build_cfg(d)
# ---- 2 • Initial skeleton & particles -------------------------------------
skeleton  <- vinecop(U, family_set = "gaussian")
# ---- 3 • Run SMC ----------------------------------------------------------
#results <- run_standard_smc(U, skeleton, cfg, type)
results <- run_block_smc(U, skeleton, cfg, type)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/main.R", echo=TRUE)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/main.R", echo=TRUE)
# ──────────────────────────────────────────────────────────────────────────────
#  C-vine SMC with spike-and-slab prior
#  2025-06-16
# ──────────────────────────────────────────────────────────────────────────────
set.seed(126)
quiet_assert <- function() {
assignInNamespace("assert_that", function(...) invisible(TRUE), ns = "assertthat")
assignInNamespace("see_if",      function(...) invisible(TRUE), ns = "assertthat")
}
load_packages <- function() {
pkgs <- c(
"rvinecopulib", "VineCopula", "data.table", "tictoc", "Rcpp",
"here", "parallel", "RcppThread", "profvis", "ggplot2", "reshape2"
)
lapply(pkgs, require, character.only = TRUE)
}
build_cfg <- function(d) {
list(
d            = d,
K            = d * (d - 1) / 2,
M            = 1000,
pi0_edge     = 0.50, #0.3
slab_sd      = 0.50,
ess_thr      = 0.50,
W            = 1000L,
k_step       = 1L,
proc_sd      = 0,
p_dyn_flip   = 0,
n_mh         = 1L,
step_sd      = 0.05,
p_flip_edge  = 0.25,
indep_copula = bicop_dist("indep"),
W_predict    = 5L,
seed         = 42,
G            = 2L                      # Group in which tree
)
}
quiet_assert()
load_packages()
source(here("src", "core_functions.R"))
source(here("src", "simulation.R"))
source(here("src", "smc_stand_vine.R"))
source(here("src", "smc_block_vine.R"))
source(here("src", "results_helpers.R"))
#U  <- sim_static_cop_3(N = 1000)
U  <- sim_ar1_copula_corr_3(N = 1000)
N  <- nrow(U)
d  <- ncol(U)
cfg <- build_cfg(d)
#results <- run_standard_smc(U, cfg, type="standard")
results <- run_block_smc(U, cfg, type="block")
# ──────────────────────────────────────────────────────────────────────────────
#  C-vine SMC with spike-and-slab prior
#  2025-06-16
# ──────────────────────────────────────────────────────────────────────────────
set.seed(126)
quiet_assert <- function() {
assignInNamespace("assert_that", function(...) invisible(TRUE), ns = "assertthat")
assignInNamespace("see_if",      function(...) invisible(TRUE), ns = "assertthat")
}
load_packages <- function() {
pkgs <- c(
"rvinecopulib", "VineCopula", "data.table", "tictoc", "Rcpp",
"here", "parallel", "RcppThread", "profvis", "ggplot2", "reshape2"
)
lapply(pkgs, require, character.only = TRUE)
}
build_cfg <- function(d) {
list(
d            = d,
K            = d * (d - 1) / 2,
M            = 1000,
pi0_edge     = 0.50, #0.3
slab_sd      = 0.50,
ess_thr      = 0.50,
W            = 1000L,
k_step       = 1L,
proc_sd      = 0,
p_dyn_flip   = 0,
n_mh         = 1L,
step_sd      = 0.05,
p_flip_edge  = 0.25,
indep_copula = bicop_dist("indep"),
W_predict    = 5L,
seed         = 42,
G            = 2L                      # Group in which tree
)
}
quiet_assert()
load_packages()
source(here("src", "core_functions.R"))
source(here("src", "simulation.R"))
source(here("src", "smc_stand_vine.R"))
source(here("src", "smc_block_vine.R"))
source(here("src", "results_helpers.R"))
#U  <- sim_static_cop_3(N = 1000)
U  <- sim_ar1_copula_corr_3(N = 1000)
N  <- nrow(U)
d  <- ncol(U)
cfg <- build_cfg(d)
results <- run_standard_smc(U, cfg, type="standard")
#results <- run_block_smc(U, cfg, type="block")
cat("\n\n===== FINAL MODEL EVALUATION =====\n")
cat(sprintf("Log Model Evidence: %.4f\n", results$log_model_evidence))
results[["cfg"]] <- cfg
saveRDS(results, file = "simul_results/standard_dynamic_3.rds")
# ──────────────────────────────────────────────────────────────────────────────
#  C-vine SMC with spike-and-slab prior
#  2025-06-16
# ──────────────────────────────────────────────────────────────────────────────
set.seed(126)
quiet_assert <- function() {
assignInNamespace("assert_that", function(...) invisible(TRUE), ns = "assertthat")
assignInNamespace("see_if",      function(...) invisible(TRUE), ns = "assertthat")
}
load_packages <- function() {
pkgs <- c(
"rvinecopulib", "VineCopula", "data.table", "tictoc", "Rcpp",
"here", "parallel", "RcppThread", "profvis", "ggplot2", "reshape2"
)
lapply(pkgs, require, character.only = TRUE)
}
build_cfg <- function(d) {
list(
d            = d,
K            = d * (d - 1) / 2,
M            = 1000,
pi0_edge     = 0.50, #0.3
slab_sd      = 0.50,
ess_thr      = 0.50,
W            = 1000L,
k_step       = 1L,
proc_sd      = 0,
p_dyn_flip   = 0,
n_mh         = 1L,
step_sd      = 0.05,
p_flip_edge  = 0.25,
indep_copula = bicop_dist("indep"),
W_predict    = 5L,
seed         = 42,
G            = 2L                      # Group in which tree
)
}
quiet_assert()
load_packages()
source(here("src", "core_functions.R"))
source(here("src", "simulation.R"))
source(here("src", "smc_stand_vine.R"))
source(here("src", "smc_block_vine.R"))
source(here("src", "results_helpers.R"))
#U  <- sim_static_cop_3(N = 1000)
U  <- sim_ar1_copula_corr_3(N = 1000)
N  <- nrow(U)
d  <- ncol(U)
cfg <- build_cfg(d)
#results <- run_standard_smc(U, cfg, type="standard")
results <- run_block_smc(U, cfg, type="block")
# ──────────────────────────────────────────────────────────────────────────────
#  C-vine SMC with spike-and-slab prior
#  2025-06-16
# ──────────────────────────────────────────────────────────────────────────────
set.seed(126)
quiet_assert <- function() {
assignInNamespace("assert_that", function(...) invisible(TRUE), ns = "assertthat")
assignInNamespace("see_if",      function(...) invisible(TRUE), ns = "assertthat")
}
load_packages <- function() {
pkgs <- c(
"rvinecopulib", "VineCopula", "data.table", "tictoc", "Rcpp",
"here", "parallel", "RcppThread", "profvis", "ggplot2", "reshape2"
)
lapply(pkgs, require, character.only = TRUE)
}
build_cfg <- function(d) {
list(
d            = d,
K            = d * (d - 1) / 2,
M            = 1000,
pi0_edge     = 0.70, #0.3
slab_sd      = 0.50,
ess_thr      = 0.50,
W            = 1000L,
k_step       = 1L,
proc_sd      = 0,
p_dyn_flip   = 0,
n_mh         = 1L,
step_sd      = 0.05,
p_flip_edge  = 0.25,
indep_copula = bicop_dist("indep"),
W_predict    = 5L,
seed         = 42,
G            = 2L                      # Group in which tree
)
}
quiet_assert()
load_packages()
source(here("src", "core_functions.R"))
source(here("src", "simulation.R"))
source(here("src", "smc_stand_vine.R"))
source(here("src", "smc_block_vine.R"))
source(here("src", "results_helpers.R"))
#U  <- sim_static_cop_3(N = 1000)
U  <- sim_ar1_copula_corr_3(N = 1000)
N  <- nrow(U)
d  <- ncol(U)
cfg <- build_cfg(d)
#results <- run_standard_smc(U, cfg, type="standard")
results <- run_block_smc(U, cfg, type="block")
# ──────────────────────────────────────────────────────────────────────────────
#  C-vine SMC with spike-and-slab prior
#  2025-06-16
# ──────────────────────────────────────────────────────────────────────────────
set.seed(126)
quiet_assert <- function() {
assignInNamespace("assert_that", function(...) invisible(TRUE), ns = "assertthat")
assignInNamespace("see_if",      function(...) invisible(TRUE), ns = "assertthat")
}
load_packages <- function() {
pkgs <- c(
"rvinecopulib", "VineCopula", "data.table", "tictoc", "Rcpp",
"here", "parallel", "RcppThread", "profvis", "ggplot2", "reshape2"
)
lapply(pkgs, require, character.only = TRUE)
}
build_cfg <- function(d) {
list(
d            = d,
K            = d * (d - 1) / 2,
M            = 1000,
pi0_edge     = 0.70, #0.3
slab_sd      = 0.50,
ess_thr      = 0.50,
W            = 30L,      #1000L,
k_step       = 1L,
proc_sd      = 0,
p_dyn_flip   = 0,
n_mh         = 1L,
step_sd      = 0.05,
p_flip_edge  = 0.25,
indep_copula = bicop_dist("indep"),
W_predict    = 5L,
seed         = 42,
G            = 2L                      # Group in which tree
)
}
quiet_assert()
load_packages()
source(here("src", "core_functions.R"))
source(here("src", "simulation.R"))
source(here("src", "smc_stand_vine.R"))
source(here("src", "smc_block_vine.R"))
source(here("src", "results_helpers.R"))
#U  <- sim_static_cop_3(N = 1000)
U  <- sim_ar1_copula_corr_3(N = 1000)
N  <- nrow(U)
d  <- ncol(U)
cfg <- build_cfg(d)
#results <- run_standard_smc(U, cfg, type="standard")
results <- run_block_smc(U, cfg, type="block")
