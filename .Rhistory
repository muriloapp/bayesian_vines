)
)
type="standard"
i=1
t_idx = 1
v    <- cfg_variants[[i]]          # pull the i-th inner list
tag  <- v[["label"]]               # safe even if names = NULL
tweaks <- v[ setdiff(names(v), "label") ]   # drop label for merging
cfg    <- modifyList(build_cfg(d), tweaks)
cfg$label <- tag
set.seed(cfg$seed)
library(rvinecopulib)
library(VineCopula)
library(data.table)
library(tictoc)
library(Rcpp)
library(here)
library(parallel)
library(RcppThread)
library(assertthat)
library(profvis)
assignInNamespace("assert_that", function(...) invisible(TRUE), ns = "assertthat")
assignInNamespace("see_if", function(...) invisible(TRUE), ns = "assertthat")
source(here('src','core_functions.R'))
source(here('src','simulation.R'))
n_cores    = max(parallel::detectCores() - 1, 1)
skeleton  <- vinecop(U, family_set = "gaussian")
# ── dimensions ───────────────────────────────────────────────────
N <- nrow(U); K <- cfg$K; M <- cfg$M
# ── pre-allocate diagnostics ───────────────────────────────────────────────
out <- list(
log_pred   = numeric(N),
theta_mean = matrix(NA_real_, N, K),
theta_se   = matrix(NA_real_, N, K),
#gamma_mean = matrix(NA_real_, N, K),
#gamma_se   = matrix(NA_real_, N, K),
diag_log   = data.table::data.table(
t      = integer(N),
tr     = integer(N),
ESS    = numeric(N),
unique = integer(N),
euc    = numeric(N),
tau_mean = numeric(N),      # NEW
tau_sd   = numeric(N),       # NEW
pi_mean = numeric(N),      # NEW
pi_sd   = numeric(N)       # NEW
),
mh_acc_pct      = rep(NA_real_, N),
theta_hist      = array(NA_real_,    dim = c(M, N, K)),
#gamma_hist      = array(NA_integer_, dim = c(M, N, K)),
ancestorIndices = matrix(0L, M, N),
incl_hist = matrix(NA_real_, N, K)
)
# ── initial state ──────────────────────────────────────────────────────────
particles <- replicate(M, new_particle(cfg), simplify = FALSE)
particles[[826]]
out$ancestorIndices[, 1] <- seq_len(M)
tr  <- 0L        #  “tree” counter — keep if you resample by tree else 0
pos <- 1L        #  row pointer for diag_log
# ── parallel backend ───────────────────────────────────────────────────────
cl <- parallel::makeCluster(n_cores)
on.exit(parallel::stopCluster(cl), add = TRUE)          # safe cleanup
parallel::clusterSetRNGStream(cl, cfg$seed)
parallel::clusterExport(
cl,
c("mh_step_in_tree", "vine_from_particle", "log_prior", "slab_sd_from_tau", "spike_sd_from_tau", "update_tau2", "rinvgamma", "dinvgamma", "update_pi",
"bicop_dist", "vinecop_dist", "dvinecop", "skeleton", "cfg",
"mh_step", "propagate_particles", "update_weights", "ESS",
"diagnostic_report", "systematic_resample", "resample_move",
"compute_predictive_metrics", "compute_log_incr"),
envir = environment()
)
u_row <- U[t_idx, , drop = FALSE]
# 2. predictive metrics (after burn-in) ──────────────────────────────────
if (t_idx > cfg$W_predict) {
w_prev <- vapply(particles, `[[`, numeric(1), "w")
w_prev <- w_prev / sum(w_prev)
pm <- compute_predictive_metrics(u_row, particles,
skeleton, w_prev, cfg)
out$log_pred[t_idx]    <- pm$log_pred_density
out$theta_mean[t_idx,] <- pm$theta_mean
out$theta_se[t_idx,]   <- pm$theta_se
#out$gamma_mean[t_idx,] <- pm$gamma_mean
#out$gamma_se[t_idx,]   <- pm$gamma_se
}
# 3. weight update ──────────────────────────────────────────────────────
log_incr  <- compute_log_incr(particles, u_row, skeleton, cfg)
particles <- update_weights(particles, log_incr)
w_new     <- vapply(particles, `[[`, numeric(1), "w")
log_incr
rbeta(2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
rbeta(1,2,2)
hist(rbeta(200,2,2))
hist(rbeta(200,1,1))
hist(rbeta(200,5,1))
hist(rbeta(200,2,2))
hist(rbeta(200,2,2))
hist(rbeta(200,2,2))
hist(rbeta(200,2,2))
hist(rbeta(200,2,2))
hist(rbeta(200,2,2))
hist(rbeta(200,2,2))
hist(rbeta(200,2,2))
hist(rbeta(200,2,2))
hist(rbeta(200,2,2))
hist(rbeta(200,2,2))
hist(rbeta(200,1,1))
hist(rbeta(200,1,1))
hist(rbeta(200,1,1))
hist(rbeta(200,1,1))
hist(rbeta(200,1,1))
hist(rbeta(200,1,1))
source("~/Research/project_1/Code/Exploratory/smc_vines/src/runner.R", echo=TRUE)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/runner.R", echo=TRUE)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/runner.R", echo=TRUE)
# ──────────────────────────────────────────────────────────────────────────────
#  experiment_runner.R  ── batch-run C-vine SMC (standard & block)  ── 2025-06-18
# ──────────────────────────────────────────────────────────────────────────────
library(here)
source(here::here("src","config.R"))
dir.create(here::here("simul_results/static_dgp"), showWarnings = FALSE)
run_and_save <- function(U, cfg, alg = c("standard", "block"), tag = NULL) {
alg <- match.arg(alg)
res <- switch(
alg,
standard = run_standard_smc(U, cfg, type = "standard"),
block    = run_block_smc(U, cfg, type = "block")
)
res$cfg <- cfg
tag   <- if (is.null(tag)) "" else paste0("_", tag)
fname <- here::here("simul_results/static_dgp", paste0(alg, "_", ncol(U) , tag))
saveRDS(res, fname)
message(sprintf("✓ Saved %s", fname))
cat("\n\n===== FINAL MODEL EVALUATION =====\n")
cat(sprintf("Log Model Evidence: %.4f\n", res$log_model_evidence))
rm(res); invisible(gc())
}
set.seed(126)
U  <- sim_static_cop_3(N = 200)
d  <- ncol(U)
cfg_variants <- list(
# list(
#   label      = "nmh1_N200_fixed",
#   n_mh       = 1,
#   tau_prior  = "fixed"
# ) ,
list(
label      = "nmh1_N200_ivgamma_beta",
n_mh       = 1,
tau_prior  = "inv_gamma",
pi_prior   = "beta",
a_pi       = 2,
b_pi       = 2
)
)
i=1
t_idx=1
type="standard"
v    <- cfg_variants[[i]]          # pull the i-th inner list
tag  <- v[["label"]]               # safe even if names = NULL
tweaks <- v[ setdiff(names(v), "label") ]   # drop label for merging
cfg    <- modifyList(build_cfg(d), tweaks)
cfg$label <- tag
set.seed(cfg$seed)
# Block vine Block_vine
# Gene tree
# ================================================================
#  SMC para C-vine com spike-and-slab
# ================================================================
library(rvinecopulib)
library(VineCopula)
library(data.table)
library(tictoc)
library(Rcpp)
library(here)
library(parallel)
library(RcppThread)
library(assertthat)
library(profvis)
assignInNamespace("assert_that", function(...) invisible(TRUE), ns = "assertthat")
assignInNamespace("see_if", function(...) invisible(TRUE), ns = "assertthat")
source(here('src','core_functions.R'))
source(here('src','simulation.R'))
n_cores    = max(parallel::detectCores() - 1, 1)
skeleton  <- vinecop(U, family_set = "gaussian")
# ── dimensions ───────────────────────────────────────────────────
N <- nrow(U); K <- cfg$K; M <- cfg$M
# ── pre-allocate diagnostics ───────────────────────────────────────────────
out <- list(
log_pred   = numeric(N),
theta_mean = matrix(NA_real_, N, K),
theta_se   = matrix(NA_real_, N, K),
#gamma_mean = matrix(NA_real_, N, K),
#gamma_se   = matrix(NA_real_, N, K),
diag_log   = data.table::data.table(
t      = integer(N),
tr     = integer(N),
ESS    = numeric(N),
unique = integer(N),
euc    = numeric(N),
tau_mean = numeric(N),      # NEW
tau_sd   = numeric(N),       # NEW
pi_mean = numeric(N),      # NEW
pi_sd   = numeric(N)       # NEW
),
mh_acc_pct      = rep(NA_real_, N),
theta_hist      = array(NA_real_,    dim = c(M, N, K)),
#gamma_hist      = array(NA_integer_, dim = c(M, N, K)),
ancestorIndices = matrix(0L, M, N),
incl_hist = matrix(NA_real_, N, K)
)
# ── initial state ──────────────────────────────────────────────────────────
particles <- replicate(M, new_particle(cfg), simplify = FALSE)
particles[[826]]
xxx <- vapply(particles, `[[`, numeric(1), "theta")
xxx <- vapply(particles, `[[`, numeric(N), "theta")
xxx <- vapply(particles, `[[`, , "theta")
xxx <- vapply(particles, `[[`, numeric(matrix(NA,N,3)), "theta")
N
xxx <- vapply(particles, `[[`, numeric(matrix(NA, 3, N)), "theta")
xxx = do.call(rbind, lapply(particles, `[[`, "theta"))
xxx
tail(200)
tail(xxx)
tail(xxx, 200)
cfg$K
slab_sd_from_tau(tau,cfg)
rinvgamma(2, (2 - 1) * 0.025^2)
rinvgamma(1, 2, (2 - 1) * 0.025^2)
rinvgamma(1, 2, (2 - 1) * 0.025^2)
rinvgamma(1, 2, (2 - 1) * 0.025^2)
rinvgamma(1, 2, (2 - 1) * 0.025^2)
rinvgamma(1, 2, (2 - 1) * 0.025^2)
rinvgamma(1, 2, (2 - 1) * 0.025^2)
rinvgamma(1, 2, (2 - 1) * 0.025^2)
rinvgamma(1, 2, (2 - 1) * 0.025^2)
hist(rinvgamma(100, 2, (2 - 1) * 0.025^2))
hist(rinvgamma(1000, 2, (2 - 1) * 0.025^2))
# ──────────────────────────────────────────────────────────────────────────────
#  experiment_runner.R  ── batch-run C-vine SMC (standard & block)  ── 2025-06-18
# ──────────────────────────────────────────────────────────────────────────────
library(here)
source(here::here("src","config.R"))
dir.create(here::here("simul_results/static_dgp"), showWarnings = FALSE)
run_and_save <- function(U, cfg, alg = c("standard", "block"), tag = NULL) {
alg <- match.arg(alg)
res <- switch(
alg,
standard = run_standard_smc(U, cfg, type = "standard"),
block    = run_block_smc(U, cfg, type = "block")
)
res$cfg <- cfg
tag   <- if (is.null(tag)) "" else paste0("_", tag)
fname <- here::here("simul_results/static_dgp", paste0(alg, "_", ncol(U) , tag))
saveRDS(res, fname)
message(sprintf("✓ Saved %s", fname))
cat("\n\n===== FINAL MODEL EVALUATION =====\n")
cat(sprintf("Log Model Evidence: %.4f\n", res$log_model_evidence))
rm(res); invisible(gc())
}
set.seed(126)
U  <- sim_static_cop_3(N = 200)
d  <- ncol(U)
cfg_variants <- list(
# list(
#   label      = "nmh1_N200_fixed",
#   n_mh       = 1,
#   tau_prior  = "fixed"
# ) ,
list(
label      = "nmh1_N200_ivgamma_beta",
n_mh       = 1,
tau_prior  = "inv_gamma",
pi_prior   = "beta",
a_pi       = 2,
b_pi       = 2
)
)
i=1
t_idx=1
type="standard"
v    <- cfg_variants[[i]]          # pull the i-th inner list
tag  <- v[["label"]]               # safe even if names = NULL
tweaks <- v[ setdiff(names(v), "label") ]   # drop label for merging
cfg    <- modifyList(build_cfg(d), tweaks)
cfg$label <- tag
set.seed(cfg$seed)
# Block vine Block_vine
# Gene tree
# ================================================================
#  SMC para C-vine com spike-and-slab
# ================================================================
library(rvinecopulib)
library(VineCopula)
library(data.table)
library(tictoc)
library(Rcpp)
library(here)
library(parallel)
library(RcppThread)
library(assertthat)
library(profvis)
assignInNamespace("assert_that", function(...) invisible(TRUE), ns = "assertthat")
assignInNamespace("see_if", function(...) invisible(TRUE), ns = "assertthat")
source(here('src','core_functions.R'))
source(here('src','simulation.R'))
n_cores    = max(parallel::detectCores() - 1, 1)
skeleton  <- vinecop(U, family_set = "gaussian")
# ── dimensions ───────────────────────────────────────────────────
N <- nrow(U); K <- cfg$K; M <- cfg$M
# ── pre-allocate diagnostics ───────────────────────────────────────────────
out <- list(
log_pred   = numeric(N),
theta_mean = matrix(NA_real_, N, K),
theta_se   = matrix(NA_real_, N, K),
#gamma_mean = matrix(NA_real_, N, K),
#gamma_se   = matrix(NA_real_, N, K),
diag_log   = data.table::data.table(
t      = integer(N),
tr     = integer(N),
ESS    = numeric(N),
unique = integer(N),
euc    = numeric(N),
tau_mean = numeric(N),      # NEW
tau_sd   = numeric(N),       # NEW
pi_mean = numeric(N),      # NEW
pi_sd   = numeric(N)       # NEW
),
mh_acc_pct      = rep(NA_real_, N),
theta_hist      = array(NA_real_,    dim = c(M, N, K)),
#gamma_hist      = array(NA_integer_, dim = c(M, N, K)),
ancestorIndices = matrix(0L, M, N),
incl_hist = matrix(NA_real_, N, K)
)
# ── initial state ──────────────────────────────────────────────────────────
particles <- replicate(M, new_particle(cfg), simplify = FALSE)
particles[[826]]
particles
cfg$c_slab
particles[[826]]
rbinom(cfg$K, 1, 1 - pi)
cfg$K
pi
pi <- rbeta(1, cfg$a_pi, cfg$b_pi)
pi
pi
pi
particles[[826]]
sqrt( 0.235455
)
cfg$c_slab * sqrt(tau2)
cfg$c_slab * sqrt(particles[[826]]$tau2)
particles
particles[[826]]$tau2
rinvgamma(1, cfg$a0, cfg$b0)
rinvgamma(1, cfg$a0, cfg$b0)
rinvgamma(1, cfg$a0, cfg$b0)
rinvgamma(1, cfg$a0, cfg$b0)
rinvgamma(1, cfg$a0, cfg$b0)
hist(rinvgamma(100000, cfg$a0, cfg$b0))
hist(rinvgamma(100000, cfg$a0, cfg$b0))
rinvgamma(1, cfg$a0, cfg$b0)
rinvgamma(1, cfg$a0, cfg$b0)
rinvgamma(1, cfg$a0, cfg$b0)
particles[[826]]
particles
source("~/Research/project_1/Code/Exploratory/smc_vines/src/runner.R", echo=TRUE)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/runner.R", echo=TRUE)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/runner.R", echo=TRUE)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/runner.R", echo=TRUE)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/runner.R", echo=TRUE)
source("~/Research/project_1/Code/Exploratory/smc_vines/src/runner.R", echo=TRUE)
particles
particles[[826]]
source("~/Research/project_1/Code/Exploratory/smc_vines/src/runner.R", echo=TRUE)
skeleton  <- vinecop(U, family_set = "gaussian")
skeleton  $pair_copulas
# ──────────────────────────────────────────────────────────────────────────────
#  experiment_runner.R  ── batch-run C-vine SMC (standard & block)  ── 2025-06-18
# ──────────────────────────────────────────────────────────────────────────────
library(here)
source(here::here("src","config.R"))
dir.create(here::here("simul_results/static_dgp"), showWarnings = FALSE)
run_and_save <- function(U, cfg, alg = c("standard", "block"), tag = NULL) {
alg <- match.arg(alg)
res <- switch(
alg,
standard = run_standard_smc(U, cfg, type = "standard"),
block    = run_block_smc(U, cfg, type = "block")
)
res$cfg <- cfg
tag   <- if (is.null(tag)) "" else paste0("_", tag)
fname <- here::here("simul_results/static_dgp", paste0(alg, "_", ncol(U) , tag))
saveRDS(res, fname)
message(sprintf("✓ Saved %s", fname))
cat("\n\n===== FINAL MODEL EVALUATION =====\n")
cat(sprintf("Log Model Evidence: %.4f\n", res$log_model_evidence))
rm(res); invisible(gc())
}
set.seed(126)
U  <- sim_static_cop_3(N = 200)
d  <- ncol(U)
cfg_variants <- list(
# list(
#   label      = "nmh1_N200_fixed",
#   n_mh       = 1,
#   tau_prior  = "fixed"
# ) ,
list(
label      = "nmh1_N200_ivgamma_beta",
n_mh       = 1,
tau_prior  = "inv_gamma",
pi_prior   = "beta",
a_pi       = 2,
b_pi       = 2
)
)
v    <- cfg_variants[[i]]          # pull the i-th inner list
tag  <- v[["label"]]               # safe even if names = NULL
tweaks <- v[ setdiff(names(v), "label") ]   # drop label for merging
cfg    <- modifyList(build_cfg(d), tweaks)
cfg$label <- tag
i=1
v    <- cfg_variants[[i]]          # pull the i-th inner list
tag  <- v[["label"]]               # safe even if names = NULL
tweaks <- v[ setdiff(names(v), "label") ]   # drop label for merging
cfg    <- modifyList(build_cfg(d), tweaks)
cfg$label <- tag
set.seed(cfg$seed)
#  SMC para C-vine com spike-and-slab
# ================================================================
library(rvinecopulib)
library(VineCopula)
library(data.table)
library(tictoc)
library(Rcpp)
library(here)
library(parallel)
library(RcppThread)
library(assertthat)
library(profvis)
assignInNamespace("assert_that", function(...) invisible(TRUE), ns = "assertthat")
assignInNamespace("see_if", function(...) invisible(TRUE), ns = "assertthat")
source(here('src','core_functions.R'))
source(here('src','simulation.R'))
n_cores    = max(parallel::detectCores() - 1, 1)
skeleton  <- vinecop(U, family_set = "gaussian")
# ── dimensions ───────────────────────────────────────────────────
N <- nrow(U); K <- cfg$K; M <- cfg$M
# ── pre-allocate diagnostics ───────────────────────────────────────────────
out <- list(
log_pred   = numeric(N),
theta_mean = matrix(NA_real_, N, K),
theta_se   = matrix(NA_real_, N, K),
#gamma_mean = matrix(NA_real_, N, K),
#gamma_se   = matrix(NA_real_, N, K),
diag_log   = data.table::data.table(
t      = integer(N),
tr     = integer(N),
ESS    = numeric(N),
unique = integer(N),
euc    = numeric(N),
tau_mean = numeric(N),      # NEW
tau_sd   = numeric(N),       # NEW
pi_mean = numeric(N),      # NEW
pi_sd   = numeric(N)       # NEW
),
mh_acc_pct      = rep(NA_real_, N),
theta_hist      = array(NA_real_,    dim = c(M, N, K)),
#gamma_hist      = array(NA_integer_, dim = c(M, N, K)),
ancestorIndices = matrix(0L, M, N),
incl_hist = matrix(NA_real_, N, K)
)
# ── initial state ──────────────────────────────────────────────────────────
particles <- replicate(M, new_particle(cfg), simplify = FALSE)
particles[[826]]
particles
particles[[826]]
cfg$tau0
cfg$tau0^2
cfg$b0
cfg$a0
